const WebSocket = require('ws');
const readline = require('readline');

// Interface untuk input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fungsi untuk bertanya
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Fungsi utama
async function main() {
  console.log('=== WebSocket Chat Tester IDN ===\n');
  
  // Input channel ID langsung
  const channelId = await ask('Masukkan Channel ID (contoh: arn:aws:ivschat:us-east-1:050891932989:room/251008184322): ');
  
  if (!channelId) {
    console.log('Channel ID tidak boleh kosong!');
    rl.close();
    return;
  }
  
  console.log(`\nChannel ID: ${channelId}`);
  console.log('Menghubungkan ke WebSocket...\n');
  
  // Buat koneksi WebSocket
  const ws = new WebSocket('wss://chat.idn.app');
  const nickname = 'user_' + Math.random().toString(36).substring(2, 8);
  
  ws.on('open', () => {
    console.log('âœ“ WebSocket terhubung');
    console.log(`âœ“ Nickname: ${nickname}\n`);
    
    // Kirim authentikasi
    ws.send('NICK ' + nickname);
    ws.send('USER websocket 0 * :WebSocket User');
  });
  
  ws.on('message', (message) => {
    const msgStr = message.toString();
    
    // Handle PING
    if (msgStr.startsWith('PING')) {
      ws.send('PONG' + msgStr.substring(4));
      console.log('âŸ³ PONG sent');
      return;
    }
    
    // Handle authentikasi berhasil
    if (msgStr.includes('001')) {
      console.log('âœ“ Authentikasi berhasil');
      ws.send('JOIN #' + channelId);
      console.log(`âœ“ Bergabung ke channel: ${channelId}\n`);
      console.log('--- Menunggu pesan chat ---\n');
      return;
    }
    
    // Handle JOIN confirmation
    if (msgStr.includes('JOIN')) {
      console.log('âœ“ Berhasil join channel\n');
      return;
    }
    
    // Handle chat messages
    if (msgStr.includes('PRIVMSG')) {
      const messageMatch = msgStr.match(/PRIVMSG #[^ ]+ :(.*)/);
      if (messageMatch) {
        try {
          const chatData = JSON.parse(messageMatch[1]);
          
          // Tampilkan raw data
          console.log('ðŸ“¨ RAW DATA:');
          console.log(JSON.stringify(chatData, null, 2));
          console.log('\n' + '='.repeat(80) + '\n');
          
        } catch (parseError) {
          console.log('âš  Gagal parse message:', msgStr);
        }
      }
      return;
    }
    
    // Tampilkan pesan lain yang tidak dihandle
    console.log('ðŸ“© Message lain:', msgStr);
  });
  
  ws.on('close', () => {
    console.log('\nâœ— WebSocket terputus');
    rl.close();
    process.exit(0);
  });
  
  ws.on('error', (error) => {
    console.error('\nâœ— WebSocket error:', error.message);
    rl.close();
    process.exit(1);
  });
  
  // Handle Ctrl+C
  process.on('SIGINT', () => {
    console.log('\n\nMemutuskan koneksi...');
    ws.close();
    rl.close();
    process.exit(0);
  });
}

// Jalankan
main().catch(error => {
  console.error('Error:', error);
  process.exit(1);
});
