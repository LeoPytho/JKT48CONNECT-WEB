const WebSocket = require('ws');
const readline = require('readline');

// Helper function to generate UUID v4
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('=== WebSocket Chat Room Tester ===\n');

// Ask for chat room ID
rl.question('Masukkan Chat Room ID (contoh: arn:aws:ivschat:us-east-1:050891932989:room/251008184322): ', (chatRoomId) => {
  if (!chatRoomId || chatRoomId.trim() === '') {
    console.log('❌ Chat Room ID tidak boleh kosong!');
    rl.close();
    return;
  }

  console.log(`\n🔄 Menghubungkan ke chat room: ${chatRoomId}\n`);
  
  startChatConnection(chatRoomId.trim());
});

function startChatConnection(chatRoomId) {
  const ws = new WebSocket('wss://chat.idn.app/');
  const uuid = generateUUID();
  const userId = generateUUID();
  const timestamp = new Date().getTime();
  
  let isAuthenticated = false;
  let hasJoinedChannel = false;
  let messageCount = 0;

  ws.on('open', () => {
    console.log('✅ WebSocket terhubung!');
    console.log('📤 Mengirim autentikasi...\n');
    
    // Send authentication sequence
    ws.send('CAP LS 302');
    ws.send(`NICK idn-${userId}-${timestamp}`);
    ws.send(`USER ${userId}_${uuid} 0 * null`);
    ws.send(`CAP REQ :account-notify account-tag away-notify batch cap-notify chghost echo-message extended-join invite-notify labeled-response message-tags multi-prefix server-time setname userhost-in-names`);
    ws.send(`CAP END`);
  });

  ws.on('message', (message) => {
    const msgStr = message.toString();
    
    // Handle PING
    if (msgStr.includes('PING :')) {
      try {
        const split = msgStr.split('PING :') || [];
        const key = split[split.length - 1];
        ws.send(`PONG ${key}`);
        console.log('🏓 PING-PONG');
      } catch (e) {
        console.error('❌ PING/PONG error:', e);
      }
      return;
    }
    
    // Handle Welcome message (authentication successful)
    if (msgStr.includes(':Welcome') && !isAuthenticated) {
      isAuthenticated = true;
      console.log('✅ Autentikasi berhasil!');
      console.log(`📥 Bergabung ke channel: ${chatRoomId}\n`);
      ws.send(`@label=1 JOIN #${chatRoomId}`);
      return;
    }
    
    // Handle successful JOIN
    if (msgStr.includes('JOIN') && msgStr.includes(chatRoomId) && !hasJoinedChannel) {
      hasJoinedChannel = true;
      console.log('✅ Berhasil bergabung ke channel!');
      console.log('👂 Menunggu pesan chat...\n');
      console.log('=' .repeat(80));
      return;
    }
    
    // Handle chat messages
    if (msgStr.includes(`${chatRoomId} :`)) {
      try {
        const data = msgStr.split(`${chatRoomId} :`).pop();
        if (data) {
          const event = JSON.parse(data);
          if (event.chat) {
            messageCount++;
            const timestamp = new Date().toLocaleTimeString('id-ID');
            
            console.log(`\n[${messageCount}] ${timestamp}`);
            console.log(`👤 User: ${event.user?.name || 'Unknown'} (@${event.user?.username || 'unknown'})`);
            console.log(`💬 Pesan: ${event.chat.message}`);
            
            if (event.user?.color_code) {
              console.log(`🎨 Warna: ${event.user.color_code}`);
            }
            
            console.log('-'.repeat(80));
          }
        }
      } catch (parseError) {
        console.error('❌ Gagal parse pesan:', parseError.message);
      }
      return;
    }
    
    // Show other IRC messages for debugging (optional)
    if (msgStr.includes('NOTICE') || msgStr.includes('MODE') || msgStr.match(/^:[^ ]+ \d{3}/)) {
      // Uncomment line below to see all IRC protocol messages
      // console.log('ℹ️  IRC:', msgStr.substring(0, 100));
    }
  });

  ws.on('error', (error) => {
    console.error('\n❌ WebSocket error:', error.message);
  });

  ws.on('close', (code, reason) => {
    console.log(`\n🔌 WebSocket terputus`);
    console.log(`   Code: ${code}`);
    if (reason) console.log(`   Reason: ${reason}`);
    console.log(`\n📊 Total pesan diterima: ${messageCount}`);
    
    rl.close();
    process.exit(0);
  });

  // Handle Ctrl+C gracefully
  process.on('SIGINT', () => {
    console.log('\n\n⏹️  Menghentikan koneksi...');
    ws.close();
  });
}

// Handle readline close
rl.on('close', () => {
  console.log('\n👋 Terima kasih telah menggunakan Chat Room Tester!');
  process.exit(0);
});
